# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-11 17:32
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('descriptor', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Valid'), (2, 'Archived'), (3, 'Removed')], default=1)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('rank', models.IntegerField(choices=[(60, 'Family'), (61, 'Subfamily'), (65, 'Tribe'), (66, 'Subtribe'), (70, 'Genus'), (71, 'Subgenus'), (72, 'Section'), (73, 'Subsection'), (80, 'Specie'), (81, 'Subspecie'), (82, 'Variety'), (83, 'Subvariety')])),
                ('parent_list', models.CharField(blank=True, default='', max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z', 32), code='invalid', message='Enter only digits separated by commas.')])),
                ('descriptors', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('content_type', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('descriptor_meta_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='descriptor.DescriptorMetaModel')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='taxonomy.Taxon')),
            ],
            options={
                'verbose_name': 'taxon',
            },
        ),
        migrations.CreateModel(
            name='TaxonSynonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Valid'), (2, 'Archived'), (3, 'Removed')], default=1)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('language', models.CharField(choices=[('la', 'Latin'), ('en', 'English'), ('fr', 'French')], max_length=2)),
                ('type', models.IntegerField(choices=[(0, 'Primary'), (1, 'Synonym'), (2, 'Code')])),
                ('content_type', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='taxonomy.Taxon')),
            ],
            options={
                'verbose_name': 'taxon synonym',
            },
        ),
    ]
